generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model EmissionLog {
  id                 BigInt               @id(map: "emission_logs_pkey") @default(autoincrement())
  created_at         DateTime             @default(now()) @db.Timestamptz(6)
  name               String?
  total_emission     Int?
  category           String?
  user_id            String?              @db.Uuid
  reward_exp         Int?
  User               User?                @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  TrackerCallbackLog TrackerCallbackLog[]
}

model Event {
  id                BigInt              @id(map: "events_pkey") @default(autoincrement())
  created_at        DateTime            @default(now()) @db.Timestamptz(6)
  event_image_url   String?
  name              String?
  start_at          DateTime?           @db.Timestamptz(6)
  end_at            DateTime?           @db.Timestamptz(6)
  reward_points     Int?
  location          String?
  status            String?
  description       String?
  creator_id        String?             @db.Uuid
  highlighted       Boolean?            @default(false)
  User              User?               @relation(fields: [creator_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  UserParticipation UserParticipation[]
  location_lat      Float?
  location_lng      Float?
}

model TrackerCallbackLog {
  id              BigInt       @id(map: "tracker_callback_logs_pkey") @default(autoincrement())
  created_at      DateTime     @default(now()) @db.Timestamptz(6)
  response_body   Json?
  emission_log_id BigInt?
  EmissionLog     EmissionLog? @relation(fields: [emission_log_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model User {
  id                     String              @id(map: "profiles_pkey") @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  created_at             DateTime            @default(now()) @db.Timestamptz(6)
  full_name              String
  email                  String
  avatar_url             String?
  role                   String?
  points                 Int?             @default(0)
  experiences            Int?             @default(0)
  vehicle_emission_count Int?             @default(0)
  food_emission_count    Int?             @default(0)
  food_footprint_sum     Int?             @default(0)
  vehicle_footprint_sum  Int?             @default(0)
  total_co2_removed      Int?             @default(0)
  password               String
  EmissionLog            EmissionLog[]
  Event                  Event[]
  UserParticipation      UserParticipation[]
  ProjectParticipation   ProjectParticipation[]
}

model UserParticipation {
  id              BigInt   @id(map: "user_participations_pkey") @default(autoincrement())
  created_at      DateTime @default(now()) @db.Timestamptz(6)
  participant_id  String?  @db.Uuid
  status          String?
  description     String?
  proof_image_url String?
  event_id        BigInt?
  Event           Event?   @relation(fields: [event_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  User            User?    @relation(fields: [participant_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model Article {
  id          BigInt   @id(map: "articles_pkey") @default(autoincrement())
  created_at  DateTime @default(now()) @db.Timestamptz(6)
  title       String?
  description String?
  image_url   String?
  content_url String?
}

model Project {
  id          BigInt   @id(map: "projects_pkey") @default(autoincrement())
  created_at  DateTime @default(now()) @db.Timestamptz(6)
  title       String?
  description String?
  benefits    String?
  image_url   String? 
  location    String?
  price       Int?
  total_co2   Int?
  ProjectParticipation ProjectParticipation[]
}

model ProjectParticipation {
  id              BigInt   @id(map: "project_participations_pkey") @default(autoincrement())
  created_at      DateTime @default(now()) @db.Timestamptz(6)
  participant_id  String?  @db.Uuid
  project_id      BigInt?
  Project         Project? @relation(fields: [project_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  User            User?    @relation(fields: [participant_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}
